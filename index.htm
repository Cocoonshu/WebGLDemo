<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>atom_百度搜索</title>
    <script src="js/binderer.js"></script>
    <script src="js/geometry/mesh.js"></script>
    <script src="js/geometry/plane.js"></script>
    <script src="js/material/material.js"></script>
    <script src="js/material/texture.js"></script>
    <script src="js/material/glcolor.js"></script>
    <script src="js/loader/textureprovider.js"></script>
    <script src="js/loader/shaderloader.js"></script>
    <script src="js/loader/modelloader.js"></script>
    <script src="js/model/model.js"></script>
    <script src="js/model/imageplane.js"></script>
    <script src="js/shader.js"></script>
    <script src="js/webgl.js"></script>
    <script>
      var imageModel = {
        "mName" : "ImageBorad",
        "mMesh" : [
          {
            "mName" : "#1",
            "mDrawMode" : "TRIANGLE_STRIP",
            "mDrawProgram" : "diffuseTexture",
            "mDrawMaterial" : "diffuseTexture",
            "mVertexes" : [
              -0.5, -0.5, 0,
              +0.5, -0.5, 0,
              -0.5, +0.5, 0,
              +0.5, +0.5, 0
            ],
            "mNormals" : [
              0, 0, 1,
              0, 0, 1,
              0, 0, 1,
              0, 0, 1
            ],
            "mCoordinates" : [
              0.0, 1.0,
              1.0, 1.0,
              0.0, 0.0,
              1.0, 0.0
            ],
            "mVertexColors" : [
              1.0, 1.0, 1.0, 1.0,
              1.0, 1.0, 1.0, 1.0,
              1.0, 1.0, 1.0, 1.0,
              1.0, 1.0, 1.0, 1.0
            ],
            "mIndices" : [
              0, 1, 2, 3
            ]
          }
        ],

        "mMaterials" : [
          {
            "mName" : "diffuseTexture",
            "mColors" : [
              {
                "mName" : "filterColor",
                "mColor" : [1.0, 1.0, 1.0, 1.0],
              }
            ],
            "mTextures" : [
              {
                "mName" : "diffuse",
                "mType" : "2D",
                "mMipMap" : 0,
                "mTexture" : "img/6630489422582399713.jpg"
              }
            ]
          },
          {
            "mName" : "hintTexture",
            "mColors" : [
              {
                "mName" : "filterColor",
                "mColor" : [1.0, 1.0, 1.0, 1.0],
              }
            ],
            "mTextures" : [
              {
                "mName" : "diffuse",
                "mType" : "2D",
                "mMipMap" : 0,
                "mTexture" : "img/20170112140302.png"
              }
            ]
          }
        ],

        "mPrograms" : [
          {
            "mName" : "diffuseTexture",
            "mExportArguments" : [
              {"mType" : "uniform",   "mName" : "uMatModelView",   "mBinder" : "MVMatrix"}, // implicitly and default, MVMatrix is a constant
              {"mType" : "uniform",   "mName" : "uMatProjection",  "mBinder" : "PMatrix"},  // implicitly and default, PMatrix is a constant

              {"mType" : "attribute", "mName" : "aPosition",       "mBinder" : "mVertexes"},
              {"mType" : "attribute", "mName" : "aNormal",         "mBinder" : "mNormals"},
              {"mType" : "attribute", "mName" : "aCoordinate",     "mBinder" : "mCoordinates"},
              {"mType" : "attribute", "mName" : "aVertexColor",    "mBinder" : "mVertexColors"},
              {"mType" : "uniform",   "mName" : "uDiffuseColor",   "mBinder" : "Color::filterColor"},
              {"mType" : "uniform",   "mName" : "uDiffuseSampler", "mBinder" : "Texture::diffuse"}
            ],
            "mVertexShader" : "attribute vec3 aPosition; attribute vec3 aNormal; attribute vec4 aVertexColor; attribute vec2 aCoordinate; uniform mat4 uMatModelView; uniform mat4 uMatProjection; varying highp vec2 vTextureCoord; void main(void) {gl_Position = vec4(aPosition * 2.0, 1.0); vTextureCoord = aCoordinate;}",
            "mFragmentShader" : "varying highp vec2 vTextureCoord; uniform sampler2D uDiffuseSampler; uniform highp vec4 uDiffuseColor; void main(void) {gl_FragColor = texture2D(uDiffuseSampler, vec2(vTextureCoord.s, vTextureCoord.t));}"
          }
        ]
      };
    </script>
    <script>
    'use strict'
      class GLImageView extends GLCanvas {
        constructor(glView) {
          super(glView);
          this.mModel = null;
        }

        onGLCreated() {
          console.log("@@ [onGLCreated]");
        }

        onGLResourcesLoading() {
          console.log("@@ [onGLResourcesLoading]");
          this.mModel = Model.loadFromJSON(imageModel);
          this.mModel.install(this.getGL(), this.getTextureProvider(), this.requestRender);
        }

        onGLResize(width, height) {
          console.log("@@ [onGLResize]");
        }

        onDrawFrame(time, deltaTime) {
          console.log("@@ [onDrawFrame]");
          let gl = this.getGL();
          this.mModel.draw(gl);
        }

        onGLDestoryed() {
          console.log("@@ [onGLDestoryed]");
        }
      }
    </script>
    <script>
      var glView       = null;
      var glCanvas     = null;

      function setup() {
        glCanvas.create();
        onGLCanvasResize();
      };

      function onGLCanvasCreate(id) {
        glView   = document.getElementById(id);
        glCanvas = new GLImageView(glView);
      }

      function onGLCanvasResize() {
        if (glView != null && glCanvas != null) {
          glCanvas.resize(glView.clientWidth, glView.clientHeight);
        }
      }

      function onGLCanvasDestoryed() {
        if (glCanvas != null) {
          glCanvas.destory();
          glCanvas = null;
        }
        glView = null;
      }
    </script>
  </head>
  <body style="left:0px; top:0px; right:0px; bottom:0px; margin:0px; position:absolute;"
        onload="onGLCanvasCreate('GLCanvas'); setup();"
        onunload="onGLCanvasDestoryed()"
        onresize="onGLCanvasResize()">
    <canvas id="GLCanvas" style="border:no-border;color:#FF0000;width:100%;height:100%">WebGL isn't supported!</canvas>
  </body>
</html>
